"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var memoizerific_1 = __importDefault(require("memoizerific"));
var theming_1 = require("@storybook/theming");
var core_events_1 = require("@storybook/core-events");
var components_1 = require("@storybook/components");
var constants_1 = require("../constants");
var ColorIcon_1 = require("../components/ColorIcon");
var iframeId = 'storybook-preview-background';
var createBackgroundSelectorItem = memoizerific_1.default(1000)(function (id, name, value, hasSwatch, change) { return ({
    id: id || name,
    title: name,
    onClick: function () {
        change({ selected: value, expanded: false });
    },
    value: value,
    right: hasSwatch ? react_1.default.createElement(ColorIcon_1.ColorIcon, { background: value }) : undefined,
}); });
var getSelectedBackgroundColor = function (list, currentSelectedValue) {
    if (!list.length) {
        return 'transparent';
    }
    if (currentSelectedValue === 'transparent') {
        return currentSelectedValue;
    }
    if (list.find(function (i) { return i.value === currentSelectedValue; })) {
        return currentSelectedValue;
    }
    if (list.find(function (i) { return i.default; })) {
        return list.find(function (i) { return i.default; }).value;
    }
    return 'transparent';
};
var getDisplayableState = memoizerific_1.default(10)(function (props, state, change) {
    var data = props.api.getCurrentStoryData();
    var list = (data && data.parameters && data.parameters[constants_1.PARAM_KEY]) || [];
    var selectedBackgroundColor = getSelectedBackgroundColor(list, state.selected);
    var availableBackgroundSelectorItems = [];
    if (selectedBackgroundColor !== 'transparent') {
        availableBackgroundSelectorItems.push(createBackgroundSelectorItem('reset', 'Clear background', 'transparent', null, change));
    }
    if (list.length) {
        availableBackgroundSelectorItems = availableBackgroundSelectorItems.concat(list.map(function (_a) {
            var name = _a.name, value = _a.value;
            return createBackgroundSelectorItem(null, name, value, true, change);
        }));
    }
    return {
        items: availableBackgroundSelectorItems,
        selectedBackgroundColor: selectedBackgroundColor,
    };
});
var BackgroundSelector = /** @class */ (function (_super) {
    __extends(BackgroundSelector, _super);
    function BackgroundSelector(props) {
        var _this = _super.call(this, props) || this;
        _this.listener = function () {
            _this.setState({ selected: null });
        };
        _this.change = function (args) { return _this.setState(args); };
        _this.state = {
            items: [],
            selected: null,
            expanded: false,
        };
        return _this;
    }
    BackgroundSelector.prototype.componentDidMount = function () {
        var api = this.props.api;
        api.on(core_events_1.SET_STORIES, this.listener);
    };
    BackgroundSelector.prototype.componentWillUnmount = function () {
        var api = this.props.api;
        api.off(core_events_1.SET_STORIES, this.listener);
    };
    BackgroundSelector.prototype.render = function () {
        var _this = this;
        var expanded = this.state.expanded;
        var _a = getDisplayableState(this.props, this.state, this.change), items = _a.items, selectedBackgroundColor = _a.selectedBackgroundColor;
        return items.length ? (react_1.default.createElement(react_1.Fragment, null,
            selectedBackgroundColor ? (react_1.default.createElement(theming_1.Global, { styles: function (theme) {
                    var _a;
                    return (_a = {},
                        _a["#" + iframeId] = {
                            background: selectedBackgroundColor === 'transparent'
                                ? theme.background.content
                                : selectedBackgroundColor,
                        },
                        _a);
                } })) : null,
            react_1.default.createElement(components_1.WithTooltip, { placement: "top", trigger: "click", tooltipShown: expanded, onVisibilityChange: function (newVisibility) { return _this.setState({ expanded: newVisibility }); }, tooltip: react_1.default.createElement(components_1.TooltipLinkList, { links: items }), closeOnClick: true },
                react_1.default.createElement(components_1.IconButton, { key: "background", active: selectedBackgroundColor !== 'transparent', title: "Change the background of the preview" },
                    react_1.default.createElement(components_1.Icons, { icon: "photo" }))))) : null;
    };
    return BackgroundSelector;
}(react_1.Component));
exports.BackgroundSelector = BackgroundSelector;
